package cup.example;

import java.io.FileInputStream;

import java_cup.runtime.ComplexSymbolFactory;

/* The following code was generated by JFlex 1.3.5 on 27.10.2020, 19:34 */

    
import java_cup.runtime.Symbol;
    

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 27.10.2020, 19:34 from the specification file
 * <tt>file:/C:/Users/catal/OneDrive/Desktop/New folder (7)/New folder/New folder/New folder/lexer.flex</tt>
 */
class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\40\0\1\44\1\0\10\0\1\0\2\0\1\2\1\0\1\10\1\0"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\5\0\1\1\1\36\1\3"+
    "\42\0\1\13\1\4\1\25\1\6\1\15\1\11\1\27\1\26\1\21"+
    "\1\0\1\37\1\24\1\14\1\20\1\5\1\22\1\0\1\12\1\16"+
    "\1\17\1\23\1\41\1\40\1\42\1\7\1\43\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    37,    74,   111,   148,   185,   222,   259,   296,   333, 
      370,   407,   444,   481,   518,   555,   592,   629,   666,   703, 
      740,    74,   777,   814,   851,   888,    74,   925,   962,   999, 
     1036,    74,  1073,  1110,  1147,  1184,  1221,  1258,  1295,  1332, 
     1369,  1406,  1443,  1480,  1517,  1554,  1591,  1628,  1665,  1702, 
     1739,  1776,  1813,  1850,  1887,  1924,  1961,  1998,  2035,  2072, 
     2109,  2146,  2183,  2220,  2257,  2294,  2331,  2368,  2405,  2442, 
     2479,  2516,  2553,  2590,  2627,  2664,  2701,  2738,  2775,  2812, 
     2849,  2886,  2923,  2960,  2997,  3034,  3071,  3108,    74,  3145, 
       74,  3182,  3219,  3256,    74,  3293,  3330,  3367,    74,  3404, 
     3441,  3478,  3515,  3552,  3589,  3626,  3663,  3700,  3737,  3774, 
       74,    74,  3811,  3848,  3885,  3922,  3959,    74,    74,  3996, 
       74,    74,    74,    74,    74,    74,    74,  4033,  4070,  4107, 
     4144,  4181,  4218,  4255,  4292,  4329,  4366,  4403,  4440,  4477, 
     4514,  4551,  4588,  4625,  4662,  4699,  4736,  4773,  4810,  4847, 
     4884,  4921,  4958,  4995,  5032,  5069,  5106,  5143,  5180,  5217, 
     5254,  5291,  5328,  5365,  5402,  5439,  5476,  5513,  5550,  5587, 
     5624,  5661,  5698,  5735,  5772,  5809,  5846,  5883,  5920,  5957, 
     5994,    74,  6031,  6068,  6105,  6142,  6179,  6216,  6253,  6290, 
     6327,  6364,  6401,  6438,  6475,  6512,  6549,  6586,  6623,  6660, 
     6697,  6734,  6771,  6808,  6845,  6882,  6919,  6956,  6993,  7030, 
     7067,    74,  7104,  7141,  7178,  7215,  7252,    74,    74,  7289, 
       74,  7326,    74,    74,    74,  7363,    74,    74,    74,    74, 
       74,    74,  7400,  7437,  7474,  7511,  7548,    74,    74,  7585, 
     7622,  7659,  7696,    74,  7733,  7770,  7807,  7844,  7881,  7918, 
     7955,  7992,  8029,  8066,  8103,  8140,  8177,  8214,  8251,  8288, 
     8325,  8362,  8399,  8436,    74,  8473,  8510,  8547,  8584,    74, 
       74,  8621,  8658,    74,  8695,  8732,  8769,  8806,  8843,  8880, 
     8917,  8954,  8991,    74,  9028,  9065,  9102,  9139,  9176,  9213, 
     9250,  9287,  9324,  9361,  9398,  9435,  9472,  9509,  9546,  9583, 
     9620,  9657,  9694,  9731,  9768,  9805,  9842,  9879,  9916,  9953, 
     9990, 10027, 10064, 10101, 10138, 10175, 10212, 10249, 10286, 10323, 
    10360, 10397, 10434, 10471, 10508, 10545, 10582, 10619, 10656,    74, 
    10693, 10730, 10767, 10804, 10841, 10878, 10915, 10952,    74,    74, 
    10989, 11026, 11063,    74,    74, 11100, 11137, 11174, 11211, 11248, 
    11285, 11322, 11359, 11396, 11433, 11470, 11507, 11544, 11581, 11618, 
    11655, 11692, 11729, 11766, 11803, 11840, 11877, 11914, 11951, 11988, 
    12025, 12062, 12099, 12136,    74, 12173,    74, 12210,    74, 12247, 
    12284, 12321, 12358, 12395,    74, 12432, 12469, 12506, 12543, 12580, 
    12617, 12654,    74, 12691, 12728, 12765, 12802, 12839,    74, 12876, 
    12913,    74, 12950, 12987, 13024, 13061,    74,    74, 13098,    74, 
    13135, 13172, 13209,    74, 13246,    74, 13283, 13320, 13357, 13394, 
    13431,    74, 13468, 13505, 13542, 13579, 13616, 13653,    74, 13690, 
       74, 13727, 13764, 13801, 13838, 13875, 13912, 13949, 13986, 14023, 
       74, 14060,    74,    74, 14097, 14134, 14171, 14208, 14245, 14282, 
    14319,    74, 14356,    74,    74,    74, 14393,    74, 14430, 14467, 
    14504, 14541, 14578, 14615, 14652, 14689, 14726, 14763, 14800, 14837, 
    14874, 14911, 14948, 14985, 15022, 15059, 15096, 15133, 15170, 15207, 
    15244,    74, 15281,    74,    74,    74, 15318, 15355, 15392, 15429, 
    15466, 15503, 15540, 15577,    74,    74, 15614,    74, 15651,    74, 
    15688, 15725, 15762,    74, 15799, 15836,    74, 15873, 15910, 15947, 
       74, 15984, 16021, 16058, 16095,    74, 16132, 16169, 16206,    74, 
       74, 16243, 16280, 16317, 16354, 16391, 16428,    74, 16465,    74, 
    16502,    74,    74, 16539, 16576,    74, 16613,    74, 16650, 16687, 
    16724,    74, 16761,    74, 16798,    74, 16835, 16872, 16909,    74, 
    16946, 16983, 17020, 17057, 17094, 17131, 17168, 17205,    74, 17242, 
    17279, 17316, 17353, 17390,    74, 17427, 17464, 17501,    74, 17538, 
    17575, 17612, 17649,    74, 17686, 17723, 17760, 17797, 17834, 17871, 
    17908,    74, 17945,    74,    74, 17982,    74, 18019,    74,    74, 
    18056, 18093, 18130, 18167, 18204, 18241, 18278, 18315,    74,    74, 
       74,    74,    74, 18352,    74, 18389,    74, 18426, 18463, 18500, 
    18537, 18574,    74, 18611,    74,    74,    74, 18648, 18685, 18722, 
    18759,    74, 18796, 18833,    74, 18870, 18907, 18944,    74,    74, 
    18981,    74, 19018, 19055, 19092, 19129,    74,    74,    74,    74, 
    19166, 19203, 19240,    74, 19277, 19314,    74,    74, 19351, 19388, 
       74,    74, 19425,    74, 19462, 19499,    74,    74, 19536, 19573, 
    19610, 19647, 19684, 19721, 19758, 19795, 19832,    74,    74,    74, 
    19869, 19906, 19943, 19980, 20017, 20054, 20091, 20128, 20165,    74, 
       74, 20202, 20239, 20276,    74,    74,    74, 20313, 20350, 20387, 
    20424, 20461, 20498, 20535, 20572,    74,    74, 20609, 20646,    74, 
    20683, 20720, 20757,    74,    74, 20794, 20831, 20868, 20905,    74, 
    20942,    74,    74, 20979, 21016, 21053,    74, 21090, 21127, 21164, 
    21201,    74, 21238, 21275, 21312, 21349,    74, 21386,    74,    74, 
       74, 21423, 21460, 21497,    74,    74,    74, 21534, 21571,    74, 
       74, 21608,    74, 21645, 21682, 21719, 21756, 21793, 21830,    74, 
    21867,    74,    74
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\0\1\2\1\0\1\3\1\4\1\5\1\6\2\0"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\0\1\20\1\21\1\22\1\23\11\0\1\24"+
    "\1\25\2\0\1\26\4\0\1\27\1\30\2\0\1\31"+
    "\1\32\1\0\1\33\2\0\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\70\0\1\45\5\0"+
    "\1\46\13\0\1\47\35\0\1\50\33\0\1\51\11\0"+
    "\1\52\35\0\1\53\1\54\36\0\1\55\7\0\1\56"+
    "\5\0\1\57\25\0\1\60\17\0\1\61\1\62\14\0"+
    "\1\63\15\0\1\64\1\0\1\65\5\0\1\66\41\0"+
    "\1\67\36\0\1\70\2\0\1\71\1\0\1\72\1\0"+
    "\1\73\1\0\1\74\1\0\1\75\1\76\23\0\1\77"+
    "\1\0\1\100\3\0\1\101\1\0\1\102\3\0\1\103"+
    "\30\0\1\104\5\0\1\105\37\0\1\106\7\0\1\107"+
    "\44\0\1\110\33\0\1\111\5\0\1\112\1\0\1\113"+
    "\3\0\1\114\30\0\1\115\7\0\1\116\6\0\1\117"+
    "\1\0\1\120\30\0\1\121\2\0\1\122\1\123\47\0"+
    "\1\124\36\0\1\125\2\0\1\126\5\0\1\127\25\0"+
    "\1\130\4\0\1\131\54\0\1\132\1\0\1\133\24\0"+
    "\1\134\1\135\3\0\1\136\1\0\1\137\2\0\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
    "\23\0\1\151\4\0\1\152\46\0\1\153\1\154\5\0"+
    "\1\155\25\0\1\156\1\0\1\157\3\0\1\160\1\161"+
    "\12\0\1\162\23\0\1\163\53\0\1\164\3\0\1\165"+
    "\50\0\1\166\41\0\1\167\40\0\1\170\41\0\1\171"+
    "\15\0\1\172\1\173\1\174\1\175\1\176\1\177\21\0"+
    "\1\200\57\0\1\201\41\0\1\202\2\0\1\203\23\0"+
    "\1\204\1\0\1\205\2\0\1\206\1\207\1\210\1\211"+
    "\1\212\1\213\4\0\1\214\1\215\1\216\11\0\1\217"+
    "\25\0\1\220\36\0\1\221\3\0\1\222\41\0\1\223"+
    "\56\0\1\224\57\0\1\225\30\0\1\226\14\0\1\227"+
    "\27\0\1\230\24\0\1\231\57\0\1\232\1\0\1\233"+
    "\42\0\1\234\5\0\1\235\40\0\1\236\35\0\1\237"+
    "\51\0\1\240\51\0\1\241\45\0\1\242\44\0\1\243"+
    "\43\0\1\244\27\0\1\245\3\0\1\246\74\0\1\247"+
    "\15\0\1\250\35\0\1\251\4\0\1\252\45\0\1\253"+
    "\53\0\1\254\44\0\1\255\26\0\1\256\5\0\1\257"+
    "\74\0\1\260\21\0\1\261\37\0\1\262\3\0\1\263"+
    "\21\0\1\264\20\0\1\265\66\0\1\266\22\0\1\267"+
    "\45\0\1\270\34\0\1\271\12\0\1\272\17\0\1\273"+
    "\10\0\1\274\13\0\1\275\35\0\1\276\53\0\1\277"+
    "\31\0\1\300\6\0\1\301\3\0\1\302\3\0\1\303"+
    "\44\0\1\304\33\0\1\305\1\0\1\306\42\0\1\307"+
    "\46\0\1\310\42\0\1\311\5\0\1\312\45\0\1\313"+
    "\30\0\1\314\62\0\1\315\42\0\1\316\43\0\1\317"+
    "\31\0\1\320\55\0\1\321\32\0\1\322\61\0\1\323"+
    "\1\0\1\324\25\0\1\325\4\0\1\326\46\0\1\327"+
    "\1\330\5\0\1\331\27\0\1\332\3\0\1\333\1\334"+
    "\12\0\1\335\23\0\1\336\42\0\1\337\65\0\1\340"+
    "\41\0\1\341\40\0\1\342\57\0\1\343\1\344\1\345"+
    "\1\346\1\347\1\350\21\0\1\351\5\0\1\352\37\0"+
    "\1\353\44\0\1\354\55\0\1\355\24\0\1\356\15\0"+
    "\1\357\27\0\1\360\43\0\1\361\55\0\1\362\40\0"+
    "\1\363\62\0\1\364\37\0\1\365\42\0\1\366\32\0"+
    "\1\367\75\0\1\370\17\0\1\371\37\0\1\372\63\0"+
    "\1\373\24\0\1\374\45\0\1\375\54\0\1\376\33\0"+
    "\1\377\45\0\1\u0100\51\0\1\u0101\55\0\1\u0102\41\0"+
    "\1\u0103\31\0\1\u0104\63\0\1\u0105\1\0\1\u0106\33\0"+
    "\1\u0107\45\0\1\u0108\64\0\1\u0109\21\0\1\u010a\45\0"+
    "\1\u010b\45\0\1\u010c\45\0\1\u010d\64\0\1\u010e\44\0"+
    "\1\u010f\23\0\1\u0110\41\0\1\u0111\70\0\1\u0112\26\0"+
    "\1\u0113\6\0\1\u0114\36\0\1\u0115\40\0\1\u0116\45\0"+
    "\1\u0117\55\0\1\u0118\43\0\1\u0119\35\0\1\u011a\44\0"+
    "\1\u011b\63\0\1\u011c\23\0\1\u011d\53\0\1\u011e\32\0"+
    "\1\u011f\47\0\1\u0120\43\0\1\u0121\52\0\1\u0122\27\0"+
    "\1\u0123\61\0\1\u0124\36\0\1\u0125\45\0\1\u0126\50\0"+
    "\1\u0127\52\0\1\u0128\34\0\1\u0129\51\0\1\u012a\35\0"+
    "\1\u012b\55\0\1\u012c\30\0\1\u012d\47\0\1\u012e\42\0"+
    "\1\u012f\45\0\1\u0130\52\0\1\u0131\51\0\1\u0132\33\0"+
    "\1\u0133\43\0\1\u0134\56\0\1\u0135\34\0\1\u0136\64\0"+
    "\1\u0137\17\0\1\u0138\54\0\1\u0139\41\0\1\u013a\32\0"+
    "\1\u013b\10\0\1\u013c\52\0\1\u013d\36\0\1\u013e\41\0"+
    "\1\u013f\43\0\1\u0140\43\0\1\u0141\41\0\1\u0142\65\0"+
    "\1\u0143\30\0\1\u0144\50\0\1\u0145\46\0\1\u0146\1\0"+
    "\1\u0147\34\0\1\u0148\51\0\1\u0149\33\0\1\u014a\56\0"+
    "\1\u014b\31\0\1\u014c\55\0\1\u014d\37\0\1\u014e\5\0"+
    "\1\u014f\37\0\1\u0150\44\0\1\u0151\55\0\1\u0152\24\0"+
    "\1\u0153\15\0\1\u0154\26\0\1\u0155\51\0\1\u0156\53\0"+
    "\1\u0157\40\0\1\u0158\47\0\1\u0159\41\0\1\u015a\54\0"+
    "\1\u015b\35\0\1\u015c\35\0\1\u015d\62\0\1\u015e\33\0"+
    "\1\u015f\43\0\1\u0160\55\0\1\u0161\40\0\1\u0162\42\0"+
    "\1\u0163\56\0\1\u0164\22\0\1\u0165\63\0\1\u0166\43\0"+
    "\1\u0167\45\0\1\u0168\45\0\1\u0169\35\0\1\u016a\33\0"+
    "\1\u016b\62\0\1\u016c\33\0\1\u016d\36\0\1\u016e\64\0"+
    "\1\u016f\33\0\1\u0170\52\0\1\u0171\36\0\1\u0172\40\0"+
    "\1\u0173\47\0\1\u0174\36\0\1\u0175\55\0\1\u0176\65\0"+
    "\1\u0177\30\0\1\u0178\13\0\1\u0179\24\0\1\u017a\64\0"+
    "\1\u017b\45\0\1\u017c\25\0\1\u017d\31\0\1\u017e\55\0"+
    "\1\u017f\3\0\1\u0180\60\0\1\u0181\27\0\1\u0182\30\0"+
    "\1\u0183\60\0\1\u0184\32\0\1\u0185\62\0\1\u0186\34\0"+
    "\1\u0187\46\0\1\u0188\63\0\1\u0189\21\0\1\u018a\46\0"+
    "\1\u018b\53\0\1\u018c\35\0\1\u018d\42\0\1\u018e\67\0"+
    "\1\u018f\26\0\1\u0190\41\0\1\u0191\65\0\1\u0192\23\0"+
    "\1\u0193\45\0\1\u0194\41\0\1\u0195\44\0\1\u0196\67\0"+
    "\1\u0197\30\0\1\u0198\35\0\1\u0199\67\0\1\u019a\14\0"+
    "\1\u019b\50\0\1\u019c\56\0\1\u019d\56\0\1\u019e\22\0"+
    "\1\u019f\66\0\1\u01a0\14\0\1\u01a1\51\0\1\u01a2\43\0"+
    "\1\u01a3\44\0\1\u01a4\54\0\1\u01a5\13\0\1\u01a6\24\0"+
    "\1\u01a7\3\0\1\u01a8\40\0\1\u01a9\40\0\1\u01aa\37\0"+
    "\1\u01ab\10\0\1\u01ac\17\0\1\u01ad\32\0\1\u01ae\11\0"+
    "\1\u01af\23\0\1\u01b0\55\0\1\u01b1\43\0\1\u01b2\45\0"+
    "\1\u01b3\45\0\1\u01b4\32\0\1\u01b5\54\0\1\u01b6\56\0"+
    "\1\u01b7\12\0\1\u01b8\46\0\1\u01b9\56\0\1\u01ba\37\0"+
    "\1\u01bb\47\0\1\u01bc\41\0\1\u01bd\54\0\1\u01be\35\0"+
    "\1\u01bf\53\0\1\u01c0\32\0\1\u01c1\51\0\1\u01c2\42\0"+
    "\1\u01c3\53\0\1\u01c4\45\0\1\u01c5\26\0\1\u01c6\52\0"+
    "\1\u01c7\35\0\1\u01c8\51\0\1\u01c9\50\0\1\u01ca\42\0"+
    "\1\u01cb\41\0\1\u01cc\44\0\1\u01cd\54\0\1\u01ce\27\0"+
    "\1\u01cf\51\0\1\u01d0\57\0\1\u01d1\42\0\1\u01d2\36\0"+
    "\1\u01d3\41\0\1\u01d4\50\0\1\u01d5\33\0\1\u01d6\53\0"+
    "\1\u01d7\35\0\1\u01d8\45\0\1\u01d9\63\0\1\u01da\37\0"+
    "\1\u01db\32\0\1\u01dc\13\0\1\u01dd\1\u01de\46\0\1\u01df"+
    "\43\0\1\u01e0\36\0\1\u01e1\17\0\1\u01e2\21\0\1\u01e3"+
    "\67\0\1\u01e4\44\0\1\u01e5\44\0\1\u01e6\26\0\1\u01e7"+
    "\42\0\1\u01e8\45\0\1\u01e9\45\0\1\u01ea\32\0\1\u01eb"+
    "\60\0\1\u01ec\44\0\1\u01ed\41\0\1\u01ee\63\0\1\u01ef"+
    "\44\0\1\u01f0\20\0\1\u01f1\70\0\1\u01f2\32\0\1\u01f3"+
    "\56\0\1\u01f4\20\0\1\u01f5\40\0\1\u01f6\55\0\1\u01f7"+
    "\63\0\1\u01f8\27\0\1\u01f9\31\0\1\u01fa\60\0\1\u01fb"+
    "\44\0\1\u01fc\37\0\1\u01fd\54\0\1\u01fe\55\0\1\u01ff"+
    "\21\0\1\u0200\47\0\1\u0201\53\0\1\u0202\24\0\1\u0203"+
    "\75\0\1\u0204\21\0\1\u0205\53\0\1\u0206\35\0\1\u0207"+
    "\67\0\1\u0208\44\0\1\u0209\17\0\1\u020a\50\0\1\u020b"+
    "\42\0\1\u020c\43\0\1\u020d\51\0\1\u020e\42\0\1\u020f"+
    "\65\0\1\u0210\26\0\1\u0211\62\0\1\u0212\23\0\1\u0213"+
    "\65\0\1\u0214\26\0\1\u0215\31\0\1\u0216\54\0\1\u0217"+
    "\53\0\1\u0218\45\0\1\u0219\34\0\1\u021a\42\0\1\u021b"+
    "\46\0\1\u021c\45\0\1\u021d\45\0\1\u021e\41\0\1\u021f"+
    "\42\0\1\u0220\57\0\1\u0221\10\0\1\u0222\13\0\1\u0223"+
    "\54\0\1\u0224\41\0\1\u0225\70\0\1\u0226\32\0\1\u0227"+
    "\36\0\1\u0228\45\0\1\u0229\44\0\1\u022a\42\0\1\u022b"+
    "\41\0\1\u022c\53\0\1\u022d\36\0\1\u022e\67\0\1\u022f"+
    "\45\0\1\u0230\34\0\1\u0231\22\0\1\u0232\51\0\1\u0233"+
    "\54\0\1\u0234\60\0\1\u0235\23\0\1\u0236\51\0\1\u0237"+
    "\42\0\1\u0238\62\0\1\u0239\45\0\1\u023a\7\0\1\u023b"+
    "\70\0\1\u023c\11\0\1\u023d\42\0\1\u023e\32\0\1\u023f"+
    "\35\0\1\u0240\44\0\1\u0241\36\0\1\u0242\56\0\1\u0243"+
    "\52\0\1\u0244\32\0\1\u0245\65\0\1\u0246\51\0\1\u0247"+
    "\16\0\1\u0248\65\0\1\u0249\24\0\1\u024a\64\0\1\u024b"+
    "\20\0\1\u024c\70\0\1\u024d\25\0\1\u024e\51\0\1\u024f"+
    "\40\0\1\u0250\37\0\1\u0251\37\0\1\u0252\47\0\1\u0253"+
    "\52\0\1\u0254\45\0\1\u0255\42\0\1\u0256\64\0\1\u0257"+
    "\44\0\1\u0258\44\0\1\u0259\44\0\1\u025a\26\0\1\u025b"+
    "\42\0\1\u025c\45\0\1\u025d\41\0\1\u025e\42\0\1\u025f"+
    "\47\0\1\u0260\44\0\1\u0261\34\0\1\u0262\62\0\1\u0263"+
    "\33\0\1\u0264\70\0\1\u0265\27\0\1\u0266\61\0\1\u0267"+
    "\44\0\1\u0268\44\0\1\u0269\13\0\1\u026a\1\u026b\5\0"+
    "\1\u026c\6\0\1\u026d\57\0\1\u026e\25\0\1\u026f\33\0"+
    "\1\u0270\74\0\1\u0271\23\0\1\u0272\67\0\1\u0273\21\0"+
    "\1\u0274\65\0\1\u0275\14\0\1\u0276\51\0\1\u0277\67\0"+
    "\1\u0278\23\0\1\u0279\54\0\1\u027a\34\0\1\u027b\50\0"+
    "\1\u027c\40\0\1\u027d\65\0\1\u027e\14\0\1\u027f\74\0"+
    "\1\u0280\26\0\1\u0281\45\0\1\u0282\65\0\1\u0283\17\0"+
    "\1\u0284\54\0\1\u0285\46\0\1\u0286\33\0\1\u0287\64\0"+
    "\1\u0288\33\0\1\u0289\25\0\1\u028a\74\0\1\u028b\44\0"+
    "\1\u028c\35\0\1\u028d\53\0\1\u028e\23\0\1\u028f\44\0"+
    "\1\u0290\46\0\1\u0291\43\0\1\u0292\52\0\1\u0293\40\0"+
    "\1\u0294\43\0\1\u0295\52\0\1\u0296\42\0\1\u0297\15\0"+
    "\1\u0298\10\0\1\u0299\44\0\1\u029a\61\0\1\u029b\60\0"+
    "\1\u029c\44\0\1\u029d\44\0\1\u029e\26\0\1\u029f\42\0"+
    "\1\u02a0\53\0\1\u02a1\26\0\1\u02a2\63\0\1\u02a3\37\0"+
    "\1\u02a4\31\0\1\u02a5\65\0\1\u02a6\35\0\1\u02a7\62\0"+
    "\1\u02a8\44\0\1\u02a9\27\0\1\u02aa\44\0\1\u02ab\44\0"+
    "\1\u02ac\61\0\1\u02ad\25\0\1\u02ae\43\0\1\u02af\33\0"+
    "\1\u02b0\45\0\1\u02b1\57\0\1\u02b2\62\0\1\u02b3\24\0"+
    "\1\u02b4\42\0\1\u02b5\67\0\1\u02b6\45\0\1\u02b7\41\0"+
    "\1\u02b8\44\0\1\u02b9\24\0\1\u02ba\47\0\1\u02bb\61\0"+
    "\1\u02bc\21\0\1\u02bd\60\0\1\u02be\34\0\1\u02bf\63\0"+
    "\1\u02c0\44\0\1\u02c1\26\0\1\u02c2\44\0\1\u02c3\44\0"+
    "\1\u02c4\36\0\1\u02c5\70\0\1\u02c6\23\0\1\u02c7\65\0"+
    "\1\u02c8\44\0\1\u02c9\20\0\1\u02ca\52\0\1\u02cb\41\0"+
    "\1\u02cc\65\0\1\u02cd\26\0\1\u02ce\36\0\1\u02cf\60\0"+
    "\1\u02d0\44\0\1\u02d1\54\0\1\u02d2\35\0\1\u02d3\44\0"+
    "\1\u02d4\23\0\1\u02d5\15\0\1\u02d6\11\0\1\u02d7\24\0"+
    "\1\u02d8\64\0\1\u02d9\44\0\1\u02da\44\0\1\u02db\35\0"+
    "\1\u02dc\41\0\1\u02dd\37\0\1\u02de\63\0\1\u02df\44\0"+
    "\1\u02e0\44\0\1\u02e1\21\0\1\u02e2\52\0\1\u02e3\61\0"+
    "\1\u02e4\44\0\1\u02e5\27\0\1\u02e6\61\0\1\u02e7\20\0"+
    "\1\u02e8\61\0\1\u02e9\33\0\1\u02ea\65\0\1\u02eb\33\0"+
    "\1\u02ec\35\0\1\u02ed\63\0\1\u02ee\25\0\1\u02ef\63\0"+
    "\1\u02f0\44\0\1\u02f1\6\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  1,  0,  0,  0,  9,  0,  0,  0,  1,  9, 
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  1,  0,  0,  9,  0, 
     0,  0,  9,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     0,  1,  0,  0,  0,  9,  9,  0,  9,  9,  9,  9,  9,  9,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  9,  0,  9,  0,  9,  9, 
     9,  0,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  0,  9,  9,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  9,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  9,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  9,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0, 
     0,  9,  0,  0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  9,  0,  9, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  9,  0,  0,  0,  0, 
     0,  0,  1,  9,  0,  9,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     0,  9,  0,  9,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  9,  0, 
     0,  0,  0,  9,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  9, 
     0,  9,  0,  9,  9,  0,  0,  9,  0,  9,  0,  0,  0,  9,  0,  9, 
     0,  9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  9,  9,  0,  9,  0,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  0,  9,  0,  9,  0, 
     0,  0,  0,  0,  9,  0,  9,  9,  9,  0,  0,  0,  0,  9,  0,  0, 
     9,  0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  9,  9,  9,  9, 
     0,  0,  0,  9,  0,  0,  9,  9,  0,  0,  9,  9,  0,  9,  0,  0, 
     9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  9,  9,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  9,  0,  0,  0,  9, 
     9,  0,  0,  0,  0,  9,  0,  9,  9,  0,  0,  0,  9,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  9,  0,  9,  9,  9,  0,  0,  0,  9,  9, 
     9,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  9
  };

  
  private void terminate() {
		
		System.exit(0);
	}

  
  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  public Lexer(ComplexSymbolFactory f, FileInputStream fis) {
	// TODO Auto-generated constructor stub
}
/** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[21904];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 96) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 736: 
          {  return symbol(sym.cellpadding);  }
        case 754: break;
        case 735: 
          {  return symbol(sym.cellspacing);  }
        case 755: break;
        case 734: 
          {  return symbol(sym.marginwidth);  }
        case 756: break;
        case 730: 
          {  return symbol(sym.onmousemove);  }
        case 757: break;
        case 729: 
          {  return symbol(sym.onmousedown);  }
        case 758: break;
        case 728: 
          {  return symbol(sym.onmouseover);  }
        case 759: break;
        case 726: 
          {  return symbol(sym.bordercolor);  }
        case 760: break;
        case 721: 
          {  return symbol(sym.leftmargin);  }
        case 761: break;
        case 716: 
          {  return symbol(sym.onkeypress);  }
        case 762: break;
        case 712: 
          {  return symbol(sym.onmouseout);  }
        case 763: break;
        case 711: 
          {  return symbol(sym.ondblclick);  }
        case 764: break;
        case 709: 
          {  return symbol(sym.background);  }
        case 765: break;
        case 532: 
          {  return symbol(sym.optionOpen);  }
        case 766: break;
        case 535: 
          {  return symbol(sym.smallClose);  }
        case 767: break;
        case 537: 
          {  return symbol(sym.tableClose);  }
        case 768: break;
        case 541: 
          {  return symbol(sym.selectOpen);  }
        case 769: break;
        case 543: 
          {  return symbol(sym.centerOpen);  }
        case 770: break;
        case 602: 
          {  return symbol(sym.optionClose);  }
        case 771: break;
        case 604: 
          {  return symbol(sym.selectClose);  }
        case 772: break;
        case 606: 
          {  return symbol(sym.centerClose);  }
        case 773: break;
        case 704: 
          {  return symbol(sym.topmargin);  }
        case 774: break;
        case 703: 
          {  return symbol(sym.scrolling);  }
        case 775: break;
        case 699: 
          {  return symbol(sym.accesskey);  }
        case 776: break;
        case 696: 
          {  return symbol(sym.onkeydown);  }
        case 777: break;
        case 695: 
          {  return symbol(sym.onmouseup);  }
        case 778: break;
        case 684: 
          {  return symbol(sym.hreflang);  }
        case 779: break;
        case 450: 
          {  return symbol(sym.frameOpen);  }
        case 780: break;
        case 443: 
          {  return symbol(sym.fontClose);  }
        case 781: break;
        case 442: 
          {  return symbol(sym.formClose);  }
        case 782: break;
        case 440: 
          {  return symbol(sym.bodyClose);  }
        case 783: break;
        case 344: 
          {  return symbol(sym.fontOpen);  }
        case 784: break;
        case 343: 
          {  return symbol(sym.formOpen);  }
        case 785: break;
        case 339: 
          {  return symbol(sym.supClose);  }
        case 786: break;
        case 338: 
          {  return symbol(sym.subClose);  }
        case 787: break;
        case 329: 
          {  return symbol(sym.bodyOpen);  }
        case 788: break;
        case 451: 
          {  return symbol(sym.smallOpen);  }
        case 789: break;
        case 454: 
          {  return symbol(sym.tableOpen);  }
        case 790: break;
        case 629: 
          {  return symbol(sym.disabled);  }
        case 791: break;
        case 636: 
          {  return symbol(sym.multiple);  }
        case 792: break;
        case 638: 
          {  return symbol(sym.selected);  }
        case 793: break;
        case 643: 
          {  return symbol(sym.noresize);  }
        case 794: break;
        case 646: 
          {  return symbol(sym.controls);  }
        case 795: break;
        case 667: 
          {  return symbol(sym.onsubmit);  }
        case 796: break;
        case 668: 
          {  return symbol(sym.onunload);  }
        case 797: break;
        case 669: 
          {  return symbol(sym.onchange);  }
        case 798: break;
        case 679: 
          {  return symbol(sym.tabindex);  }
        case 799: break;
        case 680: 
          {  return symbol(sym.longdesc);  }
        case 800: break;
        case 428: 
          {  return symbol(sym.chr);  }
        case 801: break;
        case 283: 
          {  return symbol(sym.src);  }
        case 802: break;
        case 273: 
          {  return symbol(sym.alt);  }
        case 803: break;
        case 270: 
          {  return symbol(sym.rev);  }
        case 804: break;
        case 269: 
          {  return symbol(sym.rel);  }
        case 805: break;
        case 264: 
          {  return symbol(sym.dir);  }
        case 806: break;
        case 243: 
          {  return symbol(sym.img);  }
        case 807: break;
        case 88: 
          {  return symbol(sym.br);  }
        case 808: break;
        case 120: 
          {  return symbol(sym.hr);  }
        case 809: break;
        case 181: 
          {  return symbol(sym.id);  }
        case 810: break;
        case 519: 
          {  return symbol(sym.cls);  }
        case 811: break;
        case 742: 
          {  return symbol(sym.marginheight);  }
        case 812: break;
        case 740: 
          {  return symbol(sym.framespacing);  }
        case 813: break;
        case 739: 
          {  return symbol(sym.bgproperties);  }
        case 814: break;
        case 686: 
          {  return symbol(sym.noframesClose);  }
        case 815: break;
        case 685: 
          {  return symbol(sym.framesetClose);  }
        case 816: break;
        case 656: 
          {  return symbol(sym.framesetOpen);  }
        case 817: break;
        case 657: 
          {  return symbol(sym.noframesOpen);  }
        case 818: break;
        case 430: 
          {  return symbol(sym.href);  }
        case 819: break;
        case 421: 
          {  return symbol(sym.cols);  }
        case 820: break;
        case 415: 
          {  return symbol(sym.link);  }
        case 821: break;
        case 413: 
          {  return symbol(sym.lang);  }
        case 822: break;
        case 409: 
          {  return symbol(sym.loop);  }
        case 823: break;
        case 407: 
          {  return symbol(sym.ismap);  }
        case 824: break;
        case 406: 
          {  return symbol(sym.name);  }
        case 825: break;
        case 401: 
          {  return symbol(sym.text);  }
        case 826: break;
        case 398: 
          {  return symbol(sym.type);  }
        case 827: break;
        case 392: 
          {  return symbol(sym.size);  }
        case 828: break;
        case 384: 
          {  return symbol(sym.axis);  }
        case 829: break;
        case 378: 
          {  return symbol(sym.abbr);  }
        case 830: break;
        case 376: 
          {  return symbol(sym.rows);  }
        case 831: break;
        case 374: 
          {  return symbol(sym.face);  }
        case 832: break;
        case 21: 
          {  return symbol(sym.space); }
        case 833: break;
        case 22: 
          {  return symbol(sym.bOpen);  }
        case 834: break;
        case 26: 
          {  return symbol(sym.aOpen);  }
        case 835: break;
        case 30: 
          {  return symbol(sym.iOpen);  }
        case 836: break;
        case 31: 
          {  return symbol(sym.pOpen);  }
        case 837: break;
        case 32: 
          {  return symbol(sym.uOpen);  }
        case 838: break;
        case 453: 
          {  return symbol(sym.tbody);  }
        case 839: break;
        case 457: 
          {  return symbol(sym.input);  }
        case 840: break;
        case 481: 
          {  return symbol(sym.frame);  }
        case 841: break;
        case 483: 
          {  return symbol(sym.rules);  }
        case 842: break;
        case 484: 
          {  return symbol(sym.alink);  }
        case 843: break;
        case 485: 
          {  return symbol(sym.align);  }
        case 844: break;
        case 494: 
          {  return symbol(sym.style);  }
        case 845: break;
        case 495: 
          {  return symbol(sym.start);  }
        case 846: break;
        case 497: 
          {  return symbol(sym.scope);  }
        case 847: break;
        case 499: 
          {  return symbol(sym.shape);  }
        case 848: break;
        case 503: 
          {  return symbol(sym.title);  }
        case 849: break;
        case 510: 
          {  return symbol(sym.label);  }
        case 850: break;
        case 515: 
          {  return symbol(sym.color);  }
        case 851: break;
        case 520: 
          {  return symbol(sym.clear);  }
        case 852: break;
        case 527: 
          {  return symbol(sym.width);  }
        case 853: break;
        case 529: 
          {  return symbol(sym.value);  }
        case 854: break;
        case 531: 
          {  return symbol(sym.vlink);  }
        case 855: break;
        case 752: 
          {  return symbol(sym.bordercolorlight);  }
        case 856: break;
        case 751: 
          {  return symbol(sym.acceptcharlist);  }
        case 857: break;
        case 749: 
          {  return symbol(sym.bordercolordark);  }
        case 858: break;
        case 238: 
          {  return symbol(sym.supOpen);  }
        case 859: break;
        case 237: 
          {  return symbol(sym.subOpen);  }
        case 860: break;
        case 231: 
          {  return symbol(sym.h6Close);  }
        case 861: break;
        case 230: 
          {  return symbol(sym.h5Close);  }
        case 862: break;
        case 229: 
          {  return symbol(sym.h4Close);  }
        case 863: break;
        case 228: 
          {  return symbol(sym.h3Close);  }
        case 864: break;
        case 117: 
          {  return symbol(sym.ulOpen);  }
        case 865: break;
        case 113: 
          {  return symbol(sym.thOpen);  }
        case 866: break;
        case 111: 
          {  return symbol(sym.trOpen);  }
        case 867: break;
        case 110: 
          {  return symbol(sym.tdOpen);  }
        case 868: break;
        case 100: 
          {  return symbol(sym.uClose);  }
        case 869: break;
        case 98: 
          {  return symbol(sym.iClose);  }
        case 870: break;
        case 94: 
          {  return symbol(sym.aClose);  }
        case 871: break;
        case 91: 
          {  return symbol(sym.bClose);  }
        case 872: break;
        case 90: 
          {  return symbol(sym.olOpen);  }
        case 873: break;
        case 2: 
          {  return symbol(sym.endTag);  }
        case 874: break;
        case 118: 
          {  return symbol(sym.liOpen);  }
        case 875: break;
        case 121: 
          {  return symbol(sym.h1Open);  }
        case 876: break;
        case 122: 
          {  return symbol(sym.h2Open);  }
        case 877: break;
        case 123: 
          {  return symbol(sym.h3Open);  }
        case 878: break;
        case 124: 
          {  return symbol(sym.h4Open);  }
        case 879: break;
        case 125: 
          {  return symbol(sym.h5Open);  }
        case 880: break;
        case 126: 
          {  return symbol(sym.h6Open);  }
        case 881: break;
        case 211: 
          {  return symbol(sym.olClose);  }
        case 882: break;
        case 217: 
          {  return symbol(sym.tdClose);  }
        case 883: break;
        case 218: 
          {  return symbol(sym.trClose);  }
        case 884: break;
        case 220: 
          {  return symbol(sym.thClose);  }
        case 885: break;
        case 222: 
          {  return symbol(sym.pClose);  }
        case 886: break;
        case 223: 
          {  return symbol(sym.ulClose);  }
        case 887: break;
        case 224: 
          {  return symbol(sym.liClose);  }
        case 888: break;
        case 226: 
          {  return symbol(sym.h1Close);  }
        case 889: break;
        case 227: 
          {  return symbol(sym.h2Close);  }
        case 890: break;
        case 455: 
          {  return symbol(sym.thread);  }
        case 891: break;
        case 506: 
          {  return symbol(sym.nowrap);  }
        case 892: break;
        case 545: 
          {  return symbol(sym.border);  }
        case 893: break;
        case 549: 
          {  return symbol(sym.onblur);  }
        case 894: break;
        case 558: 
          {  return symbol(sym.onload);  }
        case 895: break;
        case 564: 
          {  return symbol(sym.dynsrc);  }
        case 896: break;
        case 568: 
          {  return symbol(sym.action);  }
        case 897: break;
        case 573: 
          {  return symbol(sym.method);  }
        case 898: break;
        case 581: 
          {  return symbol(sym.target);  }
        case 899: break;
        case 583: 
          {  return symbol(sym.noshade);  }
        case 900: break;
        case 584: 
          {  return symbol(sym.usemap);  }
        case 901: break;
        case 586: 
          {  return symbol(sym.lowsrc);  }
        case 902: break;
        case 588: 
          {  return symbol(sym.coords);  }
        case 903: break;
        case 589: 
          {  return symbol(sym.compact);  }
        case 904: break;
        case 598: 
          {  return symbol(sym.height);  }
        case 905: break;
        case 599: 
          {  return symbol(sym.hspace);  }
        case 906: break;
        case 600: 
          {  return symbol(sym.valign);  }
        case 907: break;
        case 601: 
          {  return symbol(sym.vspace);  }
        case 908: break;
        case 612: 
          {  return symbol(sym.bgcolor);  }
        case 909: break;
        case 614: 
          {  return symbol(sym.onfocus);  }
        case 910: break;
        case 615: 
          {  return symbol(sym.onreset);  }
        case 911: break;
        case 616: 
          {  return symbol(sym.onabort);  }
        case 912: break;
        case 621: 
          {  return symbol(sym.onerror);  }
        case 913: break;
        case 624: 
          {  return symbol(sym.onclick);  }
        case 914: break;
        case 628: 
          {  return symbol(sym.onkeyup);  }
        case 915: break;
        case 631: 
          {  return symbol(sym.rowspan);  }
        case 916: break;
        case 637: 
          {  return symbol(sym.enctype);  }
        case 917: break;
        case 639: 
          {  return symbol(sym.summary);  }
        case 918: break;
        case 647: 
          {  return symbol(sym.colspan);  }
        case 919: break;
        case 650: 
          {  return symbol(sym.charoff);  }
        case 920: break;
        case 651: 
          {  return symbol(sym.charset);  }
        case 921: break;
        case 653: 
          {  return symbol(sym.headers);  }
        case 922: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
